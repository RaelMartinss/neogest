// Script para testar a atualiza√ß√£o de produtos
const fetch = require('node-fetch');

async function testUpdateProduct() {
  console.log('üß™ Testando atualiza√ß√£o de produto...\n');

  try {
    // Primeiro, criar um produto para testar a atualiza√ß√£o
    console.log('üìù Criando produto para teste...');
    const newProduct = {
      name: 'Produto Para Atualizar',
      codigo: 'UPDATE001',
      barcode: '7891234567890',
      description: 'Produto criado para testar atualiza√ß√£o',
      salePrice: 25.90,
      costPrice: 15.50,
      stockQuantity: 50,
      minStock: 10,
      maxStock: 100,
      unit: 'UN',
      isActive: true
    };

    const createResponse = await fetch('http://localhost:3000/api/products', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(newProduct)
    });

    if (!createResponse.ok) {
      const errorData = await createResponse.json();
      console.log('‚ùå Erro ao criar produto:', errorData.error);
      return;
    }

    const createdData = await createResponse.json();
    const productId = createdData.product.id;
    console.log('‚úÖ Produto criado com ID:', productId);

    // Agora testar a atualiza√ß√£o
    console.log('\nüìù Testando atualiza√ß√£o do produto...');
    const updateData = {
      name: 'Produto Atualizado',
      codigo: 'UPDATE002',
      barcode: '7891234567891',
      description: 'Produto atualizado com sucesso',
      salePrice: 35.90,
      costPrice: 20.50,
      stockQuantity: 75,
      minStock: 15,
      maxStock: 150,
      unit: 'UN',
      isActive: true
    };

    const updateResponse = await fetch(`http://localhost:3000/api/products/${productId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(updateData)
    });

    console.log('üìä Status da resposta:', updateResponse.status);
    
    if (updateResponse.ok) {
      const updateResult = await updateResponse.json();
      console.log('‚úÖ Produto atualizado com sucesso!');
      console.log('üÜî ID do produto:', updateResult.product.id);
      console.log('üìã Dados atualizados:', {
        name: updateResult.product.name,
        codigo: updateResult.product.codigo,
        barcode: updateResult.product.barcode,
        salePrice: updateResult.product.salePrice,
        stockQuantity: updateResult.product.stockQuantity,
        isActive: updateResult.product.isActive
      });
    } else {
      const errorData = await updateResponse.json();
      console.log('‚ùå Erro ao atualizar produto:', errorData.error);
      console.log('üìÑ Detalhes:', errorData.details);
    }

    // Testar busca do produto atualizado
    console.log('\nüìã Testando busca do produto atualizado...');
    const getResponse = await fetch(`http://localhost:3000/api/products/${productId}`);
    
    if (getResponse.ok) {
      const productData = await getResponse.json();
      console.log('‚úÖ Produto encontrado ap√≥s atualiza√ß√£o:');
      console.log('üìã Dados do produto:', {
        name: productData.product.name,
        codigo: productData.product.codigo,
        barcode: productData.product.barcode,
        salePrice: productData.product.salePrice,
        stockQuantity: productData.product.stockQuantity
      });
    } else {
      console.log('‚ùå Erro ao buscar produto:', getResponse.status);
    }

    // Testar atualiza√ß√£o com dados inv√°lidos
    console.log('\nüö´ Testando atualiza√ß√£o com dados inv√°lidos...');
    const invalidUpdateData = {
      name: 'Produto Sem Pre√ßo',
      // Sem salePrice (obrigat√≥rio)
    };

    const invalidUpdateResponse = await fetch(`http://localhost:3000/api/products/${productId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(invalidUpdateData)
    });

    if (!invalidUpdateResponse.ok) {
      const invalidErrorData = await invalidUpdateResponse.json();
      console.log('‚úÖ Valida√ß√£o funcionando! Erro:', invalidErrorData.error);
    } else {
      console.log('‚ö†Ô∏è Valida√ß√£o n√£o funcionou como esperado');
    }

    // Testar atualiza√ß√£o de produto inexistente
    console.log('\nüö´ Testando atualiza√ß√£o de produto inexistente...');
    const nonExistentId = 'produto-inexistente-123';
    const nonExistentResponse = await fetch(`http://localhost:3000/api/products/${nonExistentId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(updateData)
    });

    if (!nonExistentResponse.ok) {
      const nonExistentErrorData = await nonExistentResponse.json();
      console.log('‚úÖ Produto inexistente tratado corretamente! Erro:', nonExistentErrorData.error);
    } else {
      console.log('‚ö†Ô∏è Produto inexistente n√£o foi tratado corretamente');
    }

  } catch (error) {
    console.error('üí• Erro ao testar atualiza√ß√£o de produto:', error.message);
  }
}

// Executar o teste
testUpdateProduct(); 