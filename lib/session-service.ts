import { neon } from "@neondatabase/serverless"
import { generateToken, verifyToken } from "./auth"
import { nanoid } from "nanoid"

const sql = neon(process.env.DATABASE_URL!)

export interface Session {
  id: string
  userId: string
  token: string
  expiresAt: Date
  createdAt: Date
  isActive: boolean
}

// Agora aceita token externo
export async function createSessionInDB(userId: string, email: string, role: string, token: string): Promise<string> {
  try {
    // Calcular data de expira√ß√£o (7 dias)
    const expiresAt = new Date()
    expiresAt.setDate(expiresAt.getDate() + 7)

    // Inserir sess√£o no banco
    try {
      await sql`
        INSERT INTO sessions (id, "userId", token, "expiresAt", "isActive")
        VALUES (${nanoid()}, ${userId}, ${token}, ${expiresAt.toISOString()}, true)
      `
      console.log("Sess√£o criada no banco:", { userId, expiresAt })
    } catch (err) {
      console.error("Falha ao inserir sess√£o (DB offline ou tabela ausente):", err)
      // N√£o lan√ßamos ‚Äî vamos apenas seguir com o token gerado
    }
    return token
  } catch (error) {
    console.error("Erro ao criar sess√£o no banco:", error)
    throw new Error("Erro ao criar sess√£o")
  }
}

export async function validateSessionFromDB(token: string): Promise<Session | null> {
  try {
    console.log("üîç Validando sess√£o com token:", token.substring(0, 50) + "...")
    
    // Primeiro verificar se o JWT √© v√°lido
    const payload = verifyToken(token)
    if (!payload) {
      console.log("‚ùå Token JWT inv√°lido")
      return null
    }
    
    console.log("‚úÖ Token JWT v√°lido, payload:", payload)

    // Buscar sess√£o no banco
    const result = await sql`
      SELECT id, "userId" as "userId", token, "expiresAt" as "expiresAt", 
             "createdAt" as "createdAt", "isActive" as "isActive"
      FROM sessions 
      WHERE token = ${token}
        AND "isActive" = true 
        AND DATE("expiresAt") > CURRENT_DATE
    `

    console.log("üîç Resultado da busca no banco:", result.length, "sess√µes encontradas")
    
    if (result.length === 0) {
      console.log("‚ùå Sess√£o n√£o encontrada ou expirada no banco")
      
      // Verificar se existe alguma sess√£o para este token (mesmo inativa)
      const allSessions = await sql`
        SELECT id, "userId" as "userId", token, "expiresAt" as "expiresAt", 
               "createdAt" as "createdAt", "isActive" as "isActive"
        FROM sessions 
        WHERE token = ${token}
      `
      console.log("üîç Todas as sess√µes para este token:", allSessions.length)
      if (allSessions.length > 0) {
        console.log("üîç Detalhes da sess√£o:", allSessions[0])
      }
      
      return null
    }

    const session = result[0] as Session
    console.log("‚úÖ Sess√£o v√°lida encontrada:", { id: session.id, userId: session.userId })

    return session
  } catch (error) {
    console.error("‚ùå Erro ao validar sess√£o:", error)
    return null
  }
}

export async function invalidateSessionInDB(token: string): Promise<void> {
  try {
    const result = await sql`
      UPDATE sessions 
      SET "isActive" = false 
      WHERE token = ${token}
    `
    console.log("Sess√£o invalidada no banco")
  } catch (error) {
    console.error("Erro ao invalidar sess√£o:", error)
  }
}

export async function cleanupExpiredSessions(): Promise<void> {
  try {
    const result = await sql`
      UPDATE sessions 
      SET "isActive" = false 
      WHERE "expiresAt" < NOW() AND "isActive" = true
    `
    console.log(`${result.length} sess√µes expiradas limpas`)
  } catch (error) {
    console.error("Erro ao limpar sess√µes expiradas:", error)
  }
}
